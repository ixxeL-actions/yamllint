---
name: 'Yamllint'
description: 'A linter for YAML files.'
author: 'ixxeL'
inputs:
  format:
    description: 'Format result. [parsable,standard,colored,github,auto]'
    required: false
    default: 'colored'
  strict:
    description: 'return non-zero exit code on warnings as well as errors.'
    required: false
    default: 'false'
  no-warnings:
    description: 'output only error level problems.'
    required: false
    default: 'false'
  config-file:
    description: 'path to a custom configuration.'
    required: false
    default: ''
  fix:
    description: 'will use yamlfix to fix YAML file errors.'
    required: false
    default: 'false'
  exit-zero:
    description: 'Force exit 0 code'
    required: false
    default: 'true'
  working-dir:
    description: 'file to scan'
    required: false
    default: './*.yaml'

runs:
  using: "composite"
  steps:
    - id: yamllint
      run: |
        set +e
        echo -e "${BLUE}[ STEP - YAML scan ] > YAML scan with Yamllint.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Yamllint version.${BLANK}"
        yamllint --version
        echo -e "${YELLOW}[ EXECUTING ] > Executing Yamllint on ${{ inputs.working-dir }}.${BLANK}"

        if [[ "${{ inputs.no-warnings }}" = "true" ]]
        then
          WARN="--no-warnings"
        else
          WARN=""
        fi

        if [[ "${{ inputs.strict }}" = "true" ]]
        then
          STRICT="--strict"
        else
          STRICT=""
        fi

        if [[ -n "${{ inputs.config-file }}" ]]
        then
          CONFIG="--config-file=${{ inputs.config-file }}"
        fi

        yamllint --format=${{ inputs.format }} \
                 ${WARN} \
                 ${STRICT} \
                 ${CONFIG} \
                 ${{ inputs.working-dir }}

        EXIT_CODE="${PIPESTATUS[0]}"
        if [[ ${EXIT_CODE} -ne 0 && ${{ inputs.exit-zero }} != true ]]
        then
          echo -e "${RED}[ FAIL ] > Yamllint scan failed.${BLANK}"
          exit ${EXIT_CODE}
        else
          echo -e "${GREEN}[ SUCCESS ] > Yamllint scan succeeded.${BLANK}"
        fi

        if [[ "${{ inputs.fix }}" = "true" ]]
        then
          echo -e "${CYAN}[ INFO ] > Yamlfix version.${BLANK}"
          yamlfix --version
          echo -e "${YELLOW}[ EXECUTING ] > Executing YAML fixing with Yamlfix.${BLANK}"
          yamlfix --verbose ${{ inputs.working-dir }}
        fi
        if [[ $? = 0 ]]
        then
          echo -e "${GREEN}[ SUCCESS ] > Yamlfix fixing succeeded.${BLANK}"
        else
          echo -e "${RED}[ FAIL ] > Yamlfix fixing failed.${BLANK}"
          exit 1
        fi
      shell: bash
      env:
        RED: \033[1;31m
        GREEN: \033[1;32m
        YELLOW: \033[1;33m
        BLUE: \033[1;34m
        PURPLE: \033[1;35m
        CYAN: \033[1;36m
        BLANK: \033[0m